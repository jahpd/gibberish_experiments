music = 
	instruments: 
		guitarStereo:
			acoustics:
				damping: Gibberish.rndf 0.1, 0.2
				blend: Gibberish.rndf 0.998, 1
				channels: 2
				pan: 0
			callback: (opt) -> new Gibberish.KarplusStrong opt
		callback: (opt) ->
			music.instruments.acoustics.amp = opt.amp or 0.71
			guitarStereo.callback(music.instruments.acoustics)
  		
  	temperament:
  		frequency: 415
  		
  	sequencer:
  		# set
  		durs: Gibberish.rndf(0.22, i/11)*music.temperament.frequency for  i in [1..11]
		vals: ms(11-i)*music.temperament.frequency for i in [1..11]
		init: new Gibberish.Sequencer target:a, key:'note', durations:durs, values:vals
		callback: -> sequencer.init.start()
	
	pan:
		vals: Gibberish.rndf(-i/7, i/7) for i in [1..7]
		dur: ms(Gibberish.rndf(0.001, i/10)*1000) for i in [1..7]
		init: Gibberish.Sequencer {
  			target:a, 
  			key:'pan', 
  			durations:durspan, 
  			values:valspan 
		}
		callback: -> pan.init.start()

	reverb: 
		callback: -> new Gibberish.Reverb({
			input:music.instrument
			roomSize:.5
			wet:1
			dry;.25
		}).connect()
	
	init: 
		for k,instr in music.instruments
			instr.callback({amp: 0.71})
		music.sequencer.callback()
		music.pan.callback()
		music.reverb.callback()

music = Gibberish.Play music